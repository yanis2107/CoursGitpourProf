le suite de commande git blame elle permet de savoir qui a fait une modif avec une commande telle que :
git blame -L 40,60 readme.md pour voir qui a fait les modif sur ces lignes.

git mv nom_du_premier_ficher rename_du_ficher pour modifier le nom d'un fichier et qu'il soit pris en compte par Git.

Le git rm quant à lui permet de supprimer un  ficher.

git rm --cached permet de ne plus suivre un fichier

le gitignore quant à lui est un dossier à crée à la racine du dossier qui permet d'ignorer certains fichier dans ses dossiers il suffit d'écrire sa racine, son nom où son .
 Exemple: si j'écris vendor dans mon dossier gitignore, tout les fichiers vendors seront supprimés.
git config --local user.name 
git config --local user.email ==> Dans la situation présente cette commande nous permet de changer le pseudo qui était déjà présent.

Dans ce chapitre nous avons vu différentes commandes nous permettant de  nous pencher un peu plus sur les logs de notre dépot git.

git --no--pager log -3 --online = permet de voir les logs et de sortir de la console.

git --no-page log -nombre --oneline = permet de voir le nombre commit que l'on choisit et de sortir ensuite de la console.

git log --author permet de voir les logs d'un auteur en particulier

le git log since et before permette de regarder les logs d'un jours précis

le git log nom_du_dossier permet de regarder l'historique d'un dossier

git log -p lui s'applique à l'ensemble des commits.

git log --stat permet de voir les statistiques par rapport au modification faites au projet.

git log -E -i --grep = permet de rechercher des logs précis E pour parler des occurences et i pour insensible à la case.

git diff = permet de visualiser la modification d'un fichier avant de l'indexé

le Head-1 permet de remonter d'un commit en arrière

Le git restore quant à lui permet de restaurer le fichier dans l'état dans le quel il était avant modification.

le git reset HEAD-1 Permet d'annuler le dernier commit et met tout dans le WD sans perte

git reset --soft HEAD-1 fait à peu près la même chose sauf qu'il met tout dans la staging area sans perte

git reset --hard HEAD~1 Permet d'annuler le dernier commit et il supprime toute les modifications appliqué

 git checkout permet de retourner à l'état initial d'un fichier

 La commande git revert permet de crée un commit revert d'annulation du dernier du dernier commit réalisé.
Les deux premiers pages + le tutos
Voila
